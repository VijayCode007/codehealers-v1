<%- include ("./components/header.ejs") %>

    <style>
        #responseDiv {
            display: none;
            /* display: block; */
        }

        #responseDiv2 {
            display: none;
            /* display: block; */
        }

        .OutputDivs1{
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.5);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            color: white;
            max-height: auto;
            max-width: auto;
            height: auto;
            width: auto;
            margin: 10px;
            padding: 20px;
            border-radius: 5px;
        }

    </style>

    <div id="hero" class="relative flex flex-col items-center justify-center w-full min-h-screen bg-slate-400">

        <form
            class="flex flex-col sm:flex-row justify-center font-sans text-xl p-4 w-3/4  h-auto bg-white border-2 border-green-800"
            id="myForm">
            <label class="text-3xl mx-2" for="prompt">Prompt:</label>
            <input
                class="px-3 py-1 w-full h-12 sm:w-1/2  rounded-md border-2 border-gray-400 focus:border-5 focus:border-blue-500"
                type="text" id="prompt" name="prompt" placeholder="Enter your problem you want to search" required>
            <button
                class="p-2 h-12 sm:h-1/4 w-full sm:w-1/4 rounded-md bg-green-600 text-white text-3xl mt-4 sm:mt-0 sm:ml-4"
                type="button" onclick="handleButtonClick()">Click me</button>
        </form>

        <div id="outputs"
            class="m-4 bottom-10 flex flex-col md:flex-row justify-evenly items-center w-3/4 min-h-3/4 h-auto overflow-visible bg-[#344955]">

            <div id="responseDiv"
                class="m-3 rounded-md w-full md:w-1/2 h-auto max-2xl max-w-lg bg-[#211951] flex justify-center items-center bg-opacity-45 backdrop-filter backdrop-blur-lg border border-gray-300 shadow-lg p-4 ">
                <h2 class="mb-2 text-center font-sans  text-white/80 font-semibold text-2xl">Analysis of your
                    Information</h2>
                <!-- dynamic element thus added the css in style tag -->
            </div>

            <!-- This does not contain dynamic splitted data-->
            <div id="responseDiv2"
                class="m-4 w-full md:w-1/2 max-w-1/2 h-auto text-white bg-green-500 bg-opacity-25 backdrop-filter backdrop-blur-lg border border-green-300 rounded-lg shadow-lg p-4 ">
                <h2 class="mb-2 text-center font-sans font-semibold text-2xl">Nearby Locations of hospitals </h2>
                <div id="OutputDivs2"></div>
            </div>

        </div>

    </div>
    <script>

        async function handleButtonClick() {
            let latitude, longitude;
            const getPosition = () => {
                return new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(
                        position => resolve(position),
                        error => reject(error)
                    );
                });
            };

            try {
                if (navigator.geolocation) {
                    const position = await getPosition();
                    latitude = position.coords.latitude;
                    longitude = position.coords.longitude;
                    console.log(latitude, longitude);
                    // Continue with the rest of your code using latitude and longitude
                } else {
                    console.error('Geolocation not supported by the browser');
                }
            } catch (error) {
                console.error('Error getting user location:', error);
            }

            const prompt = document.getElementById('prompt').value;
            const myString = `
            Patient Details:
            - Age: <%= user.age %>
            - Gender: <%= user.gender %>
            - Height: <%= user.height %>cm
            - Weight: <%= user.weight %>KG
            - Blood Group: <%= user.bg %>
            - Chronic Disease: <%= user.sp %>
            Current Symptoms:
            ${prompt}

            Generate Health Information:
            Organize the information in a list format for easy extraction.Dont remove '::::' from the response
            1. **Health Situation:**
            - Suggest the potential disease name and details based on the presented symptoms. Specify a specific disease.
            ::::
            2. **Immediate Actions:**
            - Suggest immediate actions the patient should take for symptom relief.
            ::::
            3. **Potential Causes:**
            - Identify potential causes related to the presented symptoms.
            ::::
            4. **Consult a Healthcare Professional:**
            - Advise on the urgency of seeking medical attention and potential diagnostic steps.
            - Include recommendations for specific medical tests or diagnoses.
            ::::
            5. **Long-Term Prevention:**
            - Recommend long-term preventive measures, including vaccinations, lifestyle changes, and hygiene practices.
            ::::
            6. **Possible Medications (emergency situation - consult a doctor if possible, otherwise consider the following):**
            - Suggest possible over-the-counter medications for symptom management. Emphasize the urgency and the emergency nature of the situation.The patient couldn't contact the doctor and it's a emergency so please suggest whatever medication you could from the information available on the internet
            ::::
            7. **Severity Rating:**
            - Provide a severity rating on a scale of 1 to 10 for the presented symptoms. 
            `;
            var main_data = ''

            document.getElementById('myForm').style.display = 'none';
            fetch('/buddy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt: myString,
                    lat: latitude,
                    long: longitude
                }),
            })
                .then(response => response.json())
                .then(data => {
                    // document.getElementById('responseDiv').innerText = data.op;
                    // document.getElementById('responseDiv2').innerText = data.ge;

                    main_data1 = data.op.split("::::")
                    main_data2 = data.ge;

                    console.log("first data ->" + main_data1);
                    console.log("location data -> " + main_data2);


                    /** testing here **/
                    const outputContainer1 = document.getElementById("responseDiv");


                    main_data1.forEach(data => {
                        
                        const formattedData1 = data.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>").replace(/\n/g, "");
                        const div1 = document.createElement("div");
                        div1.classList.add("OutputDivs1");
                        div1.innerHTML = formattedData1;
                        outputContainer1.appendChild(div1);
                    });

                    const formattedData2 = main_data2.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong><br>");
                    const outputContainer2 = document.getElementById("OutputDivs2");
                    outputContainer2.innerText=formattedData2;

                    /** testing ends**/

                    document.getElementById('responseDiv').style.display = 'block';
                    document.getElementById('responseDiv2').style.display = 'block';
                })
                .catch(error => {
                    console.error('Error sending POST request:', error);
                });
        }
    </script>
    <%- include ("./components/footer.ejs") %>